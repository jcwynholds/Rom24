Main goal 

Use libevent bufferevent instead of select

overview
add eventbuffer to channel descriptor
define callbacks with channel descriptor as arg
game_loop_unix moved to game_tick event
this is because all the select() calls in game_loop_unix
now needed to be handled in event_base_dispatch()

main loop can go unblocked and just respond to bufferevents iso looping through all file descriptors
^^^ this is not accurate and shows the central problem with this modification
main loop used select() and timed blocking to sleep for tick Time
all automata expects this cadence so the main loop is a timing
    event to keep the cadence for automata and io processing

problems
input.  select() used fds in desc to copy input from fds
to buffers in desc
now need to rewrite all that input handling to take input from
bufferevents to the right input buffers in desc

used example code found in
https://github.com/jasonish/libevent-examples/blob/master/chat-server/chat-server.c

 
socket, structs and file descriptor definitions in merc.h 
    each callback passes descriptor_data as arg
    when constructed 
    to the bufferevent 
read_from_descriptor
read_from_buffer
read event 
    copies to d->inbuf

how to keep main loop and event_base_dispatch working
   hand in hand

   move game_loop_unix to event timer 

    in main loop
      daze decrement (based on tick)
      update_handler
      process_output
      sync clock


debugging
cd area && gdb --args ../src/rom 8500

-> bufferevent free crashes

^^^ fixed by checking if dclose->evb == null in close_socket

-> existing player login hangs (does not go into nanny()) 
^^^ now hangs due to different reason, 
Program received signal SIGSEGV, Segmentation fault.
0x00005555555bdf07 in weather_update () at update.c:592
592		    if ( d->connected == CON_PLAYING
^^^^ fixed by similar null check in weather_update

-> new player login:
Program received signal SIGSEGV, Segmentation fault.
get_trust (ch=0x0) at handler.c:707
707	    if ( ch->desc != NULL && ch->desc->original != NULL )
^^^ fixed by wiznet if stmt if d->character == NULL continue
now still
hangs, no crash doesn't go into nanny()
hanging on input.  d->incomm after login isn't getting filled
look at readcb
it's all in d->inbuf.  all working fine, probably set d->incomm 
YYYYEEEESSS


-> "Illegal name, try another"
Failing name lookup check_parse_name
YYYYEEEESSS trimming crlf in readcb helped
now can create new characters

-> failing password check for existing players
player receives Password: prompt and is immediately disconnected for wrongpassword

think through
player enters name 
look up in db
character loaded
password is checked against ch->
player entered password is where?
original password is loaded with char obj and checked with crypt()
comm.c:1198:nanny()
strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd )

password is �� when checked
why is d->incomm not the password when called by nanny()


YYYYEEEESSS working now!

changed input alltogether
instead of readcb trimming newlines and adding to incomm
readcb just copies to inbuf then in game_tick read_from_buffer
processes all input as before (with command substitutions)
and whitespace trimming et al.  

TODO:

help and [Hit Return] prompts need some more tracing through input
[Hit Return to continue]
long lists like spells get cut off
when player login many many player@host entries in log

various vscode improvements
- build works Ok
    run under makefile does not
        need to set CWD to ./area/
- run works ok
    launch config runs but needs more time for me to understand
- debugging needs config

code cleanup and whitespace

makefile improvements
    debug and optimized build
    more gnu specific for targets and project changes




